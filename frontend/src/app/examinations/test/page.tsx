'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { examinationsApi, patientsApi } from '@/lib/api';

export default function ExaminationTestPage() {
  const [testResults, setTestResults] = useState<string[]>([]);
  const [isRunning, setIsRunning] = useState(false);

  const addResult = (message: string) => {
    setTestResults(prev => [...prev, `${new Date().toLocaleTimeString()}: ${message}`]);
  };

  const runTests = async () => {
    setIsRunning(true);
    setTestResults([]);
    
    try {
      addResult('üß™ D√©marrage des tests Examination Management...');
      
      // Test 1: Get worklist
      addResult('üìã Test 1: R√©cup√©ration de la worklist...');
      try {
        const response = await examinationsApi.getWorklist({ page: 1, limit: 10 });
        addResult(`‚úÖ Test 1 r√©ussi: ${response.data.pagination.total} examens trouv√©s`);
      } catch (error: any) {
        addResult(`‚ùå Test 1 √©chou√©: ${error.response?.data?.error || error.message}`);
      }
      
      // Test 2: Get a patient for creating examination
      addResult('üë§ Test 2: R√©cup√©ration d\'un patient pour cr√©er un examen...');
      let testPatientId = '';
      try {
        const patientsResponse = await patientsApi.getAll({ limit: 1 });
        if (patientsResponse.data.patients.length > 0) {
          testPatientId = patientsResponse.data.patients[0].id;
          addResult(`‚úÖ Test 2 r√©ussi: Patient ${patientsResponse.data.patients[0].firstName} ${patientsResponse.data.patients[0].lastName} s√©lectionn√©`);
        } else {
          // Create a test patient if none exists
          const testPatient = {
            firstName: 'Test',
            lastName: 'Examination',
            birthDate: '1985-06-20',
            gender: 'M' as const,
            phoneNumber: '0123456789',
          };
          const patientResponse = await patientsApi.create(testPatient);
          testPatientId = patientResponse.data.patient.id;
          addResult(`‚úÖ Test 2 r√©ussi: Patient de test cr√©√© avec ID ${testPatientId}`);
        }
      } catch (error: any) {
        addResult(`‚ùå Test 2 √©chou√©: ${error.response?.data?.error || error.message}`);
      }
      
      // Test 3: Create a test examination
      addResult('üè• Test 3: Cr√©ation d\'un examen de test...');
      let testExaminationId = '';
      if (testPatientId) {
        try {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 1);
          tomorrow.setHours(10, 0, 0, 0);
          
          const testExamination = {
            patientId: testPatientId,
            scheduledDate: tomorrow.toISOString(),
            modality: 'CT' as const,
            examType: 'Thorax',
            bodyPart: 'Thorax',
            procedure: 'Scanner thoracique sans injection',
            contrast: false,
            priority: 'NORMAL' as const,
            clinicalInfo: 'Suspicion de pneumonie',
          };
          
          const response = await examinationsApi.create(testExamination);
          testExaminationId = response.data.examination.id;
          addResult(`‚úÖ Test 3 r√©ussi: Examen cr√©√© avec ID ${testExaminationId}`);
        } catch (error: any) {
          addResult(`‚ùå Test 3 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
      }
      
      // Test 4: Get examination by ID
      if (testExaminationId) {
        addResult('üîç Test 4: R√©cup√©ration de l\'examen par ID...');
        try {
          const response = await examinationsApi.getById(testExaminationId);
          addResult(`‚úÖ Test 4 r√©ussi: Examen ${response.data.examination.accessionNumber} r√©cup√©r√©`);
        } catch (error: any) {
          addResult(`‚ùå Test 4 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
        
        // Test 5: Update examination
        addResult('‚úèÔ∏è Test 5: Mise √† jour de l\'examen...');
        try {
          const updateData = {
            priority: 'HIGH' as const,
            status: 'IN_PROGRESS' as const,
            clinicalInfo: 'Suspicion de pneumonie - Mise √† jour: dyspn√©e',
            comments: ['Examen prioritaire', 'Patient anxieux']
          };
          
          await examinationsApi.update(testExaminationId, updateData);
          addResult(`‚úÖ Test 5 r√©ussi: Examen mis √† jour`);
        } catch (error: any) {
          addResult(`‚ùå Test 5 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
        
        // Test 6: Bulk action
        addResult('üì¶ Test 6: Action en lot...');
        try {
          await examinationsApi.bulkAction('change-status', [testExaminationId], { status: 'ACQUIRED' });
          addResult(`‚úÖ Test 6 r√©ussi: Action en lot appliqu√©e`);
        } catch (error: any) {
          addResult(`‚ùå Test 6 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
        
        // Test 7: Worklist filtering
        addResult('üîé Test 7: Filtrage de la worklist...');
        try {
          const filterParams = {
            status: 'ACQUIRED',
            modality: 'CT',
            priority: 'HIGH'
          };
          
          const response = await examinationsApi.getWorklist(filterParams);
          addResult(`‚úÖ Test 7 r√©ussi: ${response.data.examinations.length} examens trouv√©s avec filtres`);
        } catch (error: any) {
          addResult(`‚ùå Test 7 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
        
        // Test 8: Delete examination
        addResult('üóëÔ∏è Test 8: Suppression de l\'examen de test...');
        try {
          await examinationsApi.delete(testExaminationId);
          addResult(`‚úÖ Test 8 r√©ussi: Examen supprim√©`);
        } catch (error: any) {
          addResult(`‚ùå Test 8 √©chou√©: ${error.response?.data?.error || error.message}`);
        }
      }
      
      addResult('üéâ Tests termin√©s!');
      
    } catch (error: any) {
      addResult(`üí• Erreur g√©n√©rale: ${error.message}`);
    } finally {
      setIsRunning(false);
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="max-w-4xl mx-auto">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Test Examination Management
          </h1>
          <p className="text-gray-600">
            Tests automatis√©s pour v√©rifier le bon fonctionnement du syst√®me de gestion des examens
          </p>
        </div>

        <Card className="p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold">Tests API Examinations</h2>
            <Button 
              onClick={runTests} 
              disabled={isRunning}
              className="bg-green-600 hover:bg-green-700 text-white"
            >
              {isRunning ? '‚è≥ Tests en cours...' : 'üöÄ Lancer les tests'}
            </Button>
          </div>
          
          <div className="bg-gray-900 text-green-400 p-4 rounded-lg font-mono text-sm max-h-96 overflow-y-auto">
            {testResults.length === 0 ? (
              <div className="text-gray-500">Cliquez sur "Lancer les tests" pour commencer...</div>
            ) : (
              testResults.map((result, index) => (
                <div key={index} className="mb-1">
                  {result}
                </div>
              ))
            )}
          </div>
        </Card>

        <Card className="p-6">
          <h3 className="text-lg font-semibold mb-4">Tests couverts</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                <span className="text-sm">R√©cup√©ration de la worklist</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                <span className="text-sm">Cr√©ation d'un nouvel examen</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-yellow-500 rounded-full"></span>
                <span className="text-sm">R√©cup√©ration par ID</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                <span className="text-sm">Mise √† jour des donn√©es</span>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-orange-500 rounded-full"></span>
                <span className="text-sm">Actions en lot</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-pink-500 rounded-full"></span>
                <span className="text-sm">Filtrage avanc√©</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-indigo-500 rounded-full"></span>
                <span className="text-sm">Workflow des statuts</span>
              </div>
              <div className="flex items-center space-x-2">
                <span className="w-2 h-2 bg-red-500 rounded-full"></span>
                <span className="text-sm">Suppression</span>
              </div>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}