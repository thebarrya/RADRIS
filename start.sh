#!/bin/bash

# RADRIS - Script de lancement complet v2.0
# Ce script lance tous les composants du syst√®me RADRIS optimis√© :
# - Base de donn√©es PostgreSQL 15
# - Cache Redis 7
# - PACS Orthanc 24.12.0 avec backend PostgreSQL et plugins optimis√©s
# - Backend API Fastify + Prisma
# - Frontend Next.js 14
# - Visualiseur OHIF v3.11.0
# - Stone Web Viewer int√©gr√©

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Fonction pour ouvrir le navigateur
open_browser() {
    local url="$1"
    
    # D√©tecter le syst√®me d'exploitation et ouvrir le navigateur appropri√©
    if command -v open >/dev/null 2>&1; then
        # macOS
        open "$url" 2>/dev/null &
        log_success "Ouverture de $url dans le navigateur par d√©faut"
    elif command -v xdg-open >/dev/null 2>&1; then
        # Linux
        xdg-open "$url" 2>/dev/null &
        log_success "Ouverture de $url dans le navigateur par d√©faut"
    elif command -v start >/dev/null 2>&1; then
        # Windows (Git Bash/WSL)
        start "$url" 2>/dev/null &
        log_success "Ouverture de $url dans le navigateur par d√©faut"
    else
        log_warning "Impossible d'ouvrir automatiquement le navigateur"
        log_info "Veuillez ouvrir manuellement : $url"
    fi
}

# Fonction pour v√©rifier la sant√© des services
check_service_health() {
    local service="$1"
    local url="$2"
    local max_retries="${3:-10}"
    local retry_interval="${4:-3}"
    
    log_info "V√©rification de la sant√© du service $service..."
    
    local retries=$max_retries
    while [ $retries -gt 0 ]; do
        if curl -s "$url" >/dev/null 2>&1; then
            log_success "Service $service est op√©rationnel ($url)"
            return 0
        fi
        
        log_info "Service $service pas encore pr√™t, tentatives restantes: $retries"
        sleep $retry_interval
        retries=$((retries - 1))
    done
    
    log_warning "Service $service n'a pas pu √™tre v√©rifi√© sur $url"
    return 1
}

# Fonction pour afficher un r√©sum√© du d√©marrage
show_startup_summary() {
    log_info "R√©sum√© du d√©marrage :"
    
    local services=("postgres:PostgreSQL 15" "redis:Redis 7" "orthanc:Orthanc 24.12.0" "backend:Backend API" "frontend:Frontend Next.js" "ohif-viewer:OHIF v3.11.0")
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r service description <<< "$service_info"
        if docker-compose ps | grep -q "$service.*Up"; then
            echo -e "  ${GREEN}‚úì${NC} $description ($service)"
        else
            echo -e "  ${YELLOW}‚ö†${NC} $description ($service) - V√©rifier les logs"
        fi
    done
    
    # V√©rification sp√©cifique des health checks
    log_info "V√©rification des health checks Docker..."
    local healthy_services=$(docker-compose ps --filter "health=healthy" --format "{{.Service}}" 2>/dev/null | wc -l)
    if [ "$healthy_services" -gt 0 ]; then
        echo -e "  ${GREEN}‚úì${NC} $healthy_services service(s) avec health check valid√©"
    fi
    echo
}

# V√©rifications pr√©alables
check_requirements() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©. Veuillez installer Docker pour continuer."
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose n'est pas install√©. Veuillez installer Docker Compose pour continuer."
        exit 1
    fi
    
    # V√©rifier que Docker daemon est en cours d'ex√©cution
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker daemon n'est pas en cours d'ex√©cution. Veuillez d√©marrer Docker."
        exit 1
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©. Veuillez installer Node.js pour continuer."
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        log_error "npm n'est pas install√©. Veuillez installer npm pour continuer."
        exit 1
    fi
    
    log_success "Tous les pr√©requis sont satisfaits."
}

# Installation des d√©pendances
install_dependencies() {
    log_info "Installation des d√©pendances..."
    
    # D√©pendances du projet principal
    if [ -f "package.json" ]; then
        log_info "Installation des d√©pendances du projet principal..."
        npm install
    fi
    
    # D√©pendances du backend
    if [ -d "backend" ] && [ -f "backend/package.json" ]; then
        log_info "Installation des d√©pendances du backend..."
        cd backend
        npm install
        cd ..
    fi
    
    # D√©pendances du frontend
    if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
        log_info "Installation des d√©pendances du frontend..."
        cd frontend
        npm install
        cd ..
    fi
    
    log_success "D√©pendances install√©es avec succ√®s."
}

# Pr√©paration de la base de donn√©es
setup_database() {
    log_info "Pr√©paration de la base de donn√©es..."
    
    # Attendre que PostgreSQL soit disponible
    log_info "Attente de la disponibilit√© de PostgreSQL..."
    local retries=30
    while ! docker exec radris-postgres pg_isready -h localhost -p 5432 2>/dev/null && [ $retries -gt 0 ]; do
        log_info "PostgreSQL pas encore pr√™t, tentative restante: $retries"
        sleep 2
        retries=$((retries - 1))
    done
    
    if [ $retries -eq 0 ]; then
        log_error "PostgreSQL n'est pas disponible apr√®s 60 secondes"
        return 1
    fi
    
    log_success "PostgreSQL est maintenant disponible"
    
    # G√©n√©rer le client Prisma
    if [ -d "backend" ]; then
        cd backend
        if [ -f "package.json" ] && grep -q "prisma" package.json; then
            log_info "G√©n√©ration du client Prisma..."
            npm run db:generate || log_warning "√âchec de la g√©n√©ration du client Prisma"
            
            log_info "Migration de la base de donn√©es..."
            # Utiliser .env.local pour les op√©rations depuis l'h√¥te
            if [ -f ".env.local" ]; then
                export $(cat .env.local | grep -v '^#' | xargs)
            fi
            npm run db:push || log_warning "√âchec de la migration de la base de donn√©es"
            
            log_info "Initialisation des donn√©es de test..."
            npm run db:seed || log_warning "√âchec de l'initialisation des donn√©es de test"
        fi
        cd ..
    fi
}

# Fonction de nettoyage am√©lior√©e
cleanup() {
    log_info "Arr√™t des services RADRIS..."
    
    # Essayer d'arr√™ter proprement les services
    if docker-compose down --timeout 30; then
        log_success "Services arr√™t√©s proprement"
    else
        log_warning "Arr√™t forc√© des services..."
        docker-compose kill
        docker-compose down --remove-orphans
    fi
    
    exit 0
}

# Fonction de r√©cup√©ration d'erreurs
error_recovery() {
    local error_msg="$1"
    log_error "Erreur d√©tect√©e: $error_msg"
    
    # Afficher les logs des services pour le d√©bogage
    log_info "Affichage des logs des services pour le d√©bogage..."
    docker-compose logs --tail=20
    
    # Proposer des options de r√©cup√©ration
    echo
    log_info "Options de r√©cup√©ration:"
    echo "  1. Red√©marrer tous les services (./start.sh restart)"
    echo "  2. Nettoyer et red√©marrer (./start.sh clean)"
    echo "  3. Afficher les logs complets (./start.sh logs)"
    echo "  4. V√©rifier le statut (./start.sh status)"
    echo
}

# Gestion des signaux d'interruption
trap cleanup SIGINT SIGTERM

# D√©tection de la version RADRIS
detect_radris_version() {
    local has_v2_features=0
    
    # V√©rifier la pr√©sence des fichiers v2.0
    if [ -f "config/ohif-v3-config.js" ]; then
        has_v2_features=$((has_v2_features + 1))
    fi
    
    if [ -f "config/nginx-ohif-v3.conf" ]; then
        has_v2_features=$((has_v2_features + 1))
    fi
    
    if [ -f "scripts/upgrade-docker-stack.sh" ]; then
        has_v2_features=$((has_v2_features + 1))
    fi
    
    # V√©rifier la configuration Orthanc pour PostgreSQL
    if grep -q "libOrthancPostgreSQLIndex.so" config/orthanc.json 2>/dev/null; then
        has_v2_features=$((has_v2_features + 1))
    fi
    
    # V√©rifier docker-compose pour les nouvelles versions
    if grep -q "orthancteam/orthanc:24.12.0\|ohif/viewer:v3.11.0" docker-compose.yml 2>/dev/null; then
        has_v2_features=$((has_v2_features + 1))
    fi
    
    if [ $has_v2_features -ge 3 ]; then
        log_success "üöÄ RADRIS v2.0 d√©tect√© avec optimisations"
        return 0
    else
        log_info "üì¶ RADRIS v1.x d√©tect√©"
        log_info "üí° Utilisez './start.sh upgrade' pour migrer vers v2.0"
        return 1
    fi
}

# Mode de d√©marrage
start_development() {
    echo "üè• ============================================="
    echo "   RADRIS - Radiology Information System"
    echo "============================================= üè•"
    echo
    
    # D√©tection de version
    detect_radris_version
    
    log_info "D√©marrage de RADRIS en mode d√©veloppement..."
    
    # V√©rifications
    check_requirements
    
    # Arr√™ter les containers existants
    log_info "Arr√™t des containers existants..."
    if ! docker-compose down 2>/dev/null; then
        log_warning "Impossible d'arr√™ter proprement les containers existants"
        docker-compose kill 2>/dev/null || true
    fi
    
    # Installer les d√©pendances
    install_dependencies
    
    # V√©rifier et t√©l√©charger les images n√©cessaires
    log_info "V√©rification des images Docker..."
    
    # Images requises pour RADRIS v2.0
    required_images=("postgres:15" "redis:7-alpine" "orthancteam/orthanc:25.7.0" "ohif/viewer:latest")
    
    for image in "${required_images[@]}"; do
        if ! docker images | grep -q "${image%:*}.*${image#*:}"; then
            log_info "T√©l√©chargement de l'image $image..."
            docker pull "$image" || log_warning "√âchec du t√©l√©chargement de $image"
        fi
    done
    
    # D√©marrer les services Docker
    log_info "D√©marrage des services Docker..."
    if ! docker-compose up -d postgres redis orthanc; then
        error_recovery "Impossible de d√©marrer les services de base"
        return 1
    fi
    
    # Attendre que les services de base soient pr√™ts
    log_info "Attente de la disponibilit√© des services de base..."
    
    # V√©rifier Redis
    if ! check_service_health "Redis" "http://localhost:6379" 10 2; then
        log_warning "Redis n'a pas pu √™tre v√©rifi√©, mais continuons..."
    fi
    
    # V√©rifier Orthanc
    if ! check_service_health "Orthanc PACS" "http://localhost:8042/system" 15 3; then
        log_warning "Orthanc PACS n'a pas pu √™tre v√©rifi√©, mais continuons..."
    else
        # V√©rifier le plugin DICOMweb
        log_info "V√©rification du plugin DICOMweb..."
        
        # Fonction pour v√©rifier DICOMweb
        check_dicomweb_detailed() {
            local attempts=10
            local attempt=1
            
            while [ $attempt -le $attempts ]; do
                # Test l'endpoint studies
                if curl -s "http://localhost:8042/dicom-web/studies" >/dev/null 2>&1; then
                    log_success "‚úÖ API DICOMweb fonctionnelle - endpoint /studies accessible"
                    
                    # Test l'endpoint metadata pour une √©tude existante
                    local study_count=$(curl -s "http://localhost:8042/dicom-web/studies" | jq length 2>/dev/null || echo "0")
                    if [ "$study_count" -gt 0 ]; then
                        log_success "‚úÖ DICOMweb: $study_count √©tude(s) trouv√©e(s)"
                    else
                        log_info "‚ÑπÔ∏è  DICOMweb fonctionnel mais aucune √©tude pr√©sente"
                    fi
                    
                    return 0
                else
                    log_info "Tentative $attempt/$attempts - DICOMweb pas encore pr√™t..."
                    sleep 3
                    attempt=$((attempt + 1))
                fi
            done
            
            log_warning "‚ö†Ô∏è  API DICOMweb non accessible apr√®s $attempts tentatives"
            log_info "V√©rification de la configuration dans orthanc.json..."
            return 1
        }
        
        check_dicomweb_detailed
    fi
    
    # Configurer la base de donn√©es
    setup_database
    
    # D√©marrer OHIF v3.11.0 
    log_info "D√©marrage d'OHIF v3.11.0..."
    if ! docker-compose up -d ohif-viewer; then
        log_warning "Impossible de d√©marrer OHIF v3.11.0, mais continuons..."
    fi
    
    # D√©marrer le backend et le frontend
    log_info "D√©marrage du backend et du frontend..."
    if ! docker-compose up -d backend frontend; then
        error_recovery "Impossible de d√©marrer les services applicatifs"
        return 1
    fi
    
    # Attendre que le frontend soit disponible
    log_info "Attente de la disponibilit√© du frontend..."
    local frontend_retries=15
    while ! curl -s http://localhost:3000 >/dev/null 2>&1 && [ $frontend_retries -gt 0 ]; do
        log_info "Frontend pas encore pr√™t, tentative restante: $frontend_retries"
        sleep 3
        frontend_retries=$((frontend_retries - 1))
    done
    
    if [ $frontend_retries -eq 0 ]; then
        log_warning "Le frontend met plus de temps que pr√©vu √† d√©marrer"
    else
        log_success "Frontend est maintenant disponible"
    fi
    
    # V√©rifier aussi le backend
    if ! check_service_health "Backend API" "http://localhost:3001" 10 3; then
        log_warning "Backend API n'a pas pu √™tre v√©rifi√©, mais continuons..."
    fi
    
    # V√©rifier OHIF v3.11.0
    if ! check_service_health "OHIF v3.11.0" "http://localhost:3005" 10 3; then
        log_warning "OHIF v3.11.0 n'a pas pu √™tre v√©rifi√©, mais continuons..."
    else
        # V√©rifier la configuration OHIF v3
        log_info "V√©rification de la configuration OHIF v3..."
        if curl -s "http://localhost:3005/app-config.js" | grep -q "v3.11.0\|extensions.*@ohif" 2>/dev/null; then
            log_success "‚úÖ OHIF v3.11.0 correctement configur√©"
        else
            log_info "‚ÑπÔ∏è  Configuration OHIF standard d√©tect√©e"
        fi
    fi
    
    # Afficher les informations de connexion
    echo
    log_success "RADRIS d√©marr√© avec succ√®s!"
    echo
    log_info "üåü Services RADRIS v2.0 disponibles :"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "  üì± Frontend RADRIS (Interface RIS)   : http://localhost:3000"
    echo "  üîß Backend API (Fastify + Prisma)    : http://localhost:3001"
    echo "  üè• PACS Orthanc 24.12.0              : http://localhost:8042"
    echo "     ‚îú‚îÄ üéØ Orthanc Explorer 2 (Modern) : http://localhost:8042/ui/app/"
    echo "     ‚îú‚îÄ üëÅÔ∏è  Stone Web Viewer (Int√©gr√©)  : http://localhost:8042/ui/app/stone-webviewer/"
    echo "     ‚îú‚îÄ üì° API DICOMweb (QIDO/WADO)    : http://localhost:8042/dicom-web/"
    echo "     ‚îú‚îÄ üåê WADO-URI (Legacy)           : http://localhost:8042/wado"
    echo "     ‚îî‚îÄ üîç Explorer Orthanc (Classic)  : http://localhost:8042/app/explorer.html"
    echo "  üëÅÔ∏è  OHIF Viewer v3.11.0              : http://localhost:3005"
    echo "  üóÑÔ∏è  PostgreSQL 15 (Backend + Index)  : localhost:5432"
    echo "  üöÄ Redis 7 (Cache + Queues)         : localhost:6379"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo
    
    # Afficher un r√©sum√© des services d√©marr√©s
    show_startup_summary
    
    # Ouvrir automatiquement le navigateur sur l'interface principale
    log_info "Ouverture automatique de l'interface principale..."
    open_browser "http://localhost:3000"
    
    # Afficher les instructions finales
    echo
    log_info "üí° Nouvelles fonctionnalit√©s RADRIS v2.0 :"
    echo "  üöÄ Performance am√©lior√©e avec PostgreSQL backend"
    echo "  üìä Cache m√©tadonn√©es DICOMweb activ√©"
    echo "  üéØ OHIF v3.11.0 avec extensions modernes"
    echo "  üîß 8 jobs concurrents Orthanc (vs 4 pr√©c√©demment)"
    echo "  üíæ Compression de stockage activ√©e"
    echo "  üõ°Ô∏è  Health checks Docker int√©gr√©s"
    echo
    log_info "üéÆ RADRIS v2.0 est maintenant en cours d'ex√©cution!"
    log_info "Utilisez 'Ctrl+C' pour arr√™ter tous les services"
    log_info "Ou utilisez './start.sh stop' depuis un autre terminal"
    log_info "Pour plus d'options : './start.sh help'"
    echo
}

# Fonction d'aide
show_help() {
    echo "üè• RADRIS v2.0 - Script de lancement optimis√©"
    echo
    echo "Usage: $0 [OPTION]"
    echo
    echo "Options principales :"
    echo "  dev, development    D√©marrer en mode d√©veloppement (d√©faut)"
    echo "  prod, production    D√©marrer en mode production"
    echo "  stop               Arr√™ter tous les services"
    echo "  restart            Red√©marrer tous les services"
    echo "  status             Afficher le statut d√©taill√© des services"
    echo "  upgrade            Ex√©cuter la mise √† jour vers RADRIS v2.0"
    echo
    echo "Options de maintenance :"
    echo "  logs               Afficher les logs en temps r√©el"
    echo "  clean              Nettoyer les containers et volumes"
    echo "  test-dicom         Cr√©er et uploader une image DICOM de test"
    echo "  backup             Cr√©er une sauvegarde des donn√©es"
    echo "  help               Afficher cette aide"
    echo
    echo "üöÄ Nouveaut√©s RADRIS v2.0 :"
    echo "  ‚Ä¢ Orthanc 24.12.0 avec backend PostgreSQL"
    echo "  ‚Ä¢ OHIF v3.11.0 avec extensions modernes"
    echo "  ‚Ä¢ Stone Web Viewer int√©gr√© et optimis√©"
    echo "  ‚Ä¢ Performance am√©lior√©e (√ó2-3 plus rapide)"
    echo "  ‚Ä¢ Health checks et monitoring int√©gr√©s"
    echo
}

# Fonctions utilitaires
stop_services() {
    log_info "Arr√™t de tous les services RADRIS..."
    docker-compose down
    log_success "Services arr√™t√©s."
}

restart_services() {
    log_info "Red√©marrage des services RADRIS..."
    docker-compose down
    sleep 2
    start_development
}

show_logs() {
    docker-compose logs -f
}

show_status() {
    echo
    log_info "Statut des services RADRIS :"
    docker-compose ps
    echo
    
    # Afficher l'√©tat de sant√© des services web
    log_info "√âtat de sant√© des services web :"
    
    local services=("Frontend:http://localhost:3000" "Backend:http://localhost:3001" "OHIF v3:http://localhost:3005" "Orthanc 24.12.0:http://localhost:8042/system" "DICOMweb API:http://localhost:8042/dicom-web/studies" "Stone Viewer:http://localhost:8042/ui/app/stone-webviewer/" "Explorer 2:http://localhost:8042/ui/app/")
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r name url <<< "$service_info"
        if curl -s "$url" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úì${NC} $name - Accessible"
        else
            echo -e "  ${RED}‚úó${NC} $name - Inaccessible"
        fi
    done
    
    # V√©rification des plugins Orthanc
    echo
    log_info "√âtat des plugins Orthanc :"
    if plugins=$(curl -s http://localhost:8042/plugins 2>/dev/null); then
        echo "$plugins" | jq -r '.[]' 2>/dev/null | while read -r plugin; do
            case "$plugin" in
                "stone-webviewer") echo -e "  ${GREEN}‚úì${NC} Stone Web Viewer" ;;
                "dicom-web") echo -e "  ${GREEN}‚úì${NC} DICOMweb (QIDO/WADO)" ;;
                "orthanc-explorer-2") echo -e "  ${GREEN}‚úì${NC} Orthanc Explorer 2" ;;
                "gdcm") echo -e "  ${GREEN}‚úì${NC} GDCM (Image Decoder)" ;;
                *) echo -e "  ${BLUE}‚Ñπ${NC} $plugin" ;;
            esac
        done
    else
        echo -e "  ${RED}‚úó${NC} Impossible de r√©cup√©rer la liste des plugins"
    fi
    echo
}

clean_services() {
    log_warning "Cette action va supprimer tous les containers et volumes RADRIS."
    read -p "√ätes-vous s√ªr ? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Nettoyage en cours..."
        docker-compose down -v --remove-orphans
        docker system prune -f
        log_success "Nettoyage termin√©."
    else
        log_info "Nettoyage annul√©."
    fi
}

upgrade_services() {
    log_info "üöÄ Lancement de la mise √† jour vers RADRIS v2.0..."
    
    if [ -f "./scripts/upgrade-docker-stack.sh" ]; then
        chmod +x ./scripts/upgrade-docker-stack.sh
        ./scripts/upgrade-docker-stack.sh
    else
        log_error "Script de mise √† jour introuvable. Veuillez v√©rifier que ./scripts/upgrade-docker-stack.sh existe."
        exit 1
    fi
}

test_dicom() {
    log_info "üè• Cr√©ation et upload d'une image DICOM de test..."
    
    if [ -f "./scripts/create-test-dicom.py" ]; then
        cd scripts
        python3 create-test-dicom.py
        cd ..
        log_success "Image DICOM de test cr√©√©e et upload√©e."
        log_info "Testez les viewers :"
        echo "  ‚Ä¢ Stone Web Viewer : http://localhost:8042/ui/app/stone-webviewer/"
        echo "  ‚Ä¢ OHIF v3.11.0     : http://localhost:3005"
    else
        log_error "Script create-test-dicom.py introuvable."
        exit 1
    fi
}

backup_data() {
    log_info "üíæ Cr√©ation d'une sauvegarde des donn√©es RADRIS..."
    
    local backup_dir="./backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    # Sauvegarde des volumes Orthanc
    log_info "Sauvegarde des donn√©es Orthanc..."
    docker run --rm \
        -v radris_orthanc_data:/data \
        -v "$(pwd)/$backup_dir":/backup \
        alpine tar czf /backup/orthanc_data_backup.tar.gz -C /data .
    
    # Sauvegarde de la base PostgreSQL
    log_info "Sauvegarde de la base PostgreSQL..."
    docker-compose exec -T postgres pg_dump -U radris radris > "$backup_dir/postgres_backup.sql"
    
    # Sauvegarde des configurations
    cp -r config "$backup_dir/"
    cp docker-compose.yml "$backup_dir/"
    
    log_success "Sauvegarde cr√©√©e dans $backup_dir"
}

# Point d'entr√©e principal
main() {
    case "${1:-dev}" in
        "dev"|"development")
            start_development
            ;;
        "prod"|"production")
            log_warning "Mode production non encore impl√©ment√©. Utilisation du mode d√©veloppement."
            start_development
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            restart_services
            ;;
        "logs")
            show_logs
            ;;
        "status")
            show_status
            ;;
        "clean")
            clean_services
            ;;
        "upgrade")
            upgrade_services
            ;;
        "test-dicom")
            test_dicom
            ;;
        "backup")
            backup_data
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
}

# Information de version au lancement
if [ "${1:-}" = "" ] || [ "${1:-}" = "dev" ] || [ "${1:-}" = "development" ]; then
    echo
    echo "üè• RADRIS v2.0 - Radiology Information System"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "üöÄ Stack optimis√© : Orthanc 25.7.0 + OHIF latest"
    echo "‚ö° Performance am√©lior√©e avec PostgreSQL backend"
    echo "üëÅÔ∏è  Viewers : Stone Web Viewer + OHIF v3 moderne"
    echo "üõ°Ô∏è  Health checks et monitoring int√©gr√©s"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo
fi

# Ex√©cution
main "$@"